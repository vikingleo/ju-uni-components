<script module="touch" lang="wxs" src="./touch.wxs"></script>

<template>
    <view class="img-upload" :class="className" :style="{margin:count>1?gutter/2*-1+'px':0}">
        <view class="img-upload-content" id="juImageUploadContent" :style="{height:contentHeight>0?contentHeight+'px':'auto'}">
            <template v-for="(item,index) in instanceFiles">
                <!--实际列表里的-->
                <view :id="'move'+item.id"
                      class="img-upload-container img-preview-item move-info"
                      :class="{'in-moving':item.id==moveId&&isLongTouch,'is-sortable':sortable}"
                      v-if="showImage"
                      :key="item.id"
                      :style="{ height:instanceWidth,width:instanceWidth,padding:count>1?gutter/2+'px':0,transform:findTranslate(item.id), }">
                    <view class="img-upload-body" :style="{backgroundColor,}" :class="{square:rowCount>0,'in-moving':item.id==moveId&&isLongTouch}">
                        <!--删除-->
                        <view class="btn-type-default-remove" v-if="type!=='readonly'" @click="onRemove(item)">
                            <image src="/static/images/icons/icon_remove_circle.png" mode="aspectFill" class="btn-type-default-remove-img"/>
                        </view>
                        <!-- 选择 -->
                        <view class="btn-type-default-select" :class="{'selected':findInSelected(item.id)}" v-if="type==='select'&&selectCount>0" @click="onSelect(item,index)">
                            <i class="vis-icon icon-check" v-if="findInSelected(item.id)"></i>
                        </view>
                        <!--图片框-->
                        <view class="img-upload-body-content" @touchstart="touch.touchStart" :data-translateX="listPositionInfo[item.id]" :data-id="item.id" @touchmove="touch.touchMove" @touchend="touch.touchEnd" :class="{'no-border':borderStyle==='none','selected':findInSelected(item.id)}" :style="{borderStyle,borderColor,borderWidth,borderRadius}">
                            <image :src="item.url" :mode="mode" class="img-upload-img"></image>
                        </view>
                    </view>
                </view>
            </template>
            <!--添加按钮-->
            <view class="img-upload-container" :class="{'is-sortable':sortable}" v-if="type!=='readonly'&&type!=='readonly-remove'&&((count===1&&!picUrls.length)||(picUrls.length<count)||!showImage)" :style="{height:instanceWidth,width:instanceWidth ,padding:count>1?(gutter/2+'px'):0 ,transform:addBtnPosition,}">
                <button class="img-upload-btn img-upload-body" :class="{square:rowCount>0}" :style="{backgroundColor}" @click="onChoose" :disabled="uploading">
                    <view class="img-upload-body-content" :class="{'no-border':borderStyle==='none'}" :style="{color,borderStyle,borderColor,borderWidth,borderRadius}">
                        <template v-if="$slots.content">
                            <slot name="content"></slot>
                        </template>
                        <template v-else>
                            <view>
                                <view class="icon-box" v-if="!uploading">
                                    <!--优先选择图片展示-->
                                    <template v-if="pictureIcon">
                                        <image :src="pictureIcon" :class="iconClass" mode="widthFix" style="height:0;" :style="{width:iconSize}"></image>
                                    </template>
                                    <i v-else-if="icon" :class="icon+' '+iconClass" :style="{fontSize:iconSize}"></i>
                                </view>
                                <i v-else class="vis-icon icon-loading-line btn-icon spinner-cycle"></i>
                            </view>
                            <view class="btn-text" v-if="text" :class="textClass" v-text="text" :style="{fontSize,color:textColor}"></view>
                        </template>
                    </view>
                </button>
            </view>
        </view>
        <view v-text="'longPressTime: ' + longPressTime"></view>
        <view v-text="'isLongTouch: ' + isLongTouch"></view>
        <!--        <view v-text="'id: ' + readyMoveDom.id"></view>-->
        <!--        <view v-text="'longpress: ' + readyMoveDom.longpress"></view>-->
        <!--        <view v-text="'index: ' + readyMoveDom.index"></view>-->
        <!--        <view v-text="'top: ' + readyMoveDom.top"></view>-->
        <!--        <view v-text="'bottom: ' + readyMoveDom.bottom"></view>-->
        <!--        <view v-text="'left: ' + readyMoveDom.left"></view>-->
        <!--        <view v-text="'right: ' + readyMoveDom.right"></view>-->
        <!--        <view v-text="'width: ' + readyMoveDom.width"></view>-->
        <!--        <view v-text="'height: ' + readyMoveDom.height"></view>-->
        <!--        <view v-text="'move_x: ' + readyMoveDom.move_x"></view>-->
        <!--        <view v-text="'move_y: ' + readyMoveDom.move_y"></view>-->
        <!--        <view v-text="'o_page_x: ' + readyMoveDom.o_page_x" class="text-danger"></view>-->
        <!--        <view v-text="'page_x: ' + readyMoveDom.page_x"></view>-->
        <!--        <view v-text="'o_page_y: ' + readyMoveDom.o_page_y" class="text-danger"></view>-->
        <!--        <view v-text="'page_y: ' + readyMoveDom.page_y"></view>-->
        <!--        <view v-text="'translateX: ' + readyMoveDom.translateX"></view>-->
        <!--        <view v-text="'o_translate_x: ' + readyMoveDom.o_translate_x" class="text-danger"></view>-->
        <!--        <view v-text="'translateY: ' + readyMoveDom.translateY"></view>-->
        <!--        <view v-text="'o_translate_y: ' + readyMoveDom.o_translate_y" class="text-danger"></view>-->
        <!--        <view v-text="'translate: ' + readyMoveDom.translate"></view>-->
        <!--        <view v-text="'touchStartTime: ' + touchStartTime"></view>-->

        <view class="text-danger" v-text="'addBtnPosition: ' + addBtnPosition"></view>
    </view>
</template>
<script>
import ImageOperation from "./image-operation"
import request from '../../http/request'
import {deepClone, throttle} from '@/utils'

export default {
    name: 'ju-image-upload',
    components: {},
    props: {
        // 是否可以拖拽调整顺序
        sortable: {type: Boolean, default: true},
        // 是否提供选择图片,select,null|default,readonly,readonly-remove
        type: {type: String, default: ""},
        // 类名
        className: {type: String, default: ""},
        // @TODO 可选数量
        selectCount: {type: Number | String, default: 0},
        // 已选择的图片的id
        selected: {type: Array, default: () => []},
        //图片路径，单张时，可传字符串或数组，多张请用数组
        src: {type: String | Array, default: ""},
        //单行个数，如果不设置或<=0，设置width、height
        rowCount: {type: String | Number, default: 0},
        // 单项相距，只接受不带单位的数字/字符串型数字
        gutter: {type: Number, default: 10},
        // 单项宽度
        width: {type: String, default: "200rpx"},
        //单项高度
        height: {type: String, default: "200rpx"},
        // 自定义添加按钮的icon，填写完整icon，例如 icon="app-icon icon-home"
        icon: {type: String, default: "vis-icon icon-plus"},
        // 有别于icon，icon也是传class，但也用于显示图标，为不和icon额外class混淆，展示图片时，使用icon-class作为额外的class
        iconClass: {type: String, default: ""},
        // 图标大小，适用于图片
        iconSize: {type: String, default: "40rpx"},
        // icon图片模式
        pictureIcon: {type: String, default: ""},
        // 添加按钮的文本，默认只有图标
        text: {type: String, default: ""},
        // 文本的额外class
        textClass: {type: String, default: ""},
        //边框样式
        borderRadius: {type: String, default: "0"},
        borderColor: {type: String, default: "#ddd"},
        borderStyle: {type: String, default: "dashed"},
        borderWidth: {type: String, default: "1px"},
        fontSize: {type: String, default: "24rpx"},
        // 添加按钮的背景色
        backgroundColor: {type: String, default: "#fff"},
        // 按钮的文本颜色
        textColor: {type: String, default: "#000"},
        // 图片的模式，上传的图片所用的模式，具体查看image文档
        mode: {type: String, default: "aspectFill"},
        //额外参数，每个操作回调都会返回，例如form中，指明field是哪个：:param="{field:'idCard'}"}
        param: {type: Object, default: null},
        //选择图片总数,所选图片到达数量，隐藏添加按钮
        count: {
            type: Number | String, default: 1, validator: function (value) {
                return +value > 0
            }
        },
        //单次选择数量
        chooseCount: {
            type: Number | String, default: 1, validator: function (value) {
                return +value >= 1 && +value <= 9
            }
        },
        // 字体颜色
        color: {type: String, default: "#ccc"},
        //上传到服务器，考虑到url分为uni和微信js-sdk，使用这个判定是否开启
        upload: {type: Boolean, default: false},
        // 图片上传的地址，uni-app上传方式
        uploadUrl: String,
        // 图片上传的地址，js-sdk上传方式，js-sdk需要用到mediaId上传，和uni不同
        uploadWxSdkUrl: String,
        // 选择图片、上传图片后，不展示图片
        showImage: {type: Boolean, default: true},
        // 删除是否提供确认
        removeConfirm: {type: Boolean, default: false},
    },
    data() {
        //@TODO 需要改成自己的路径，如不设置，则需要在调用组件的地方，设置属性upload-uni-url或upload-wx-sdk-url，否则无法使用自动上传
        const selectedList = this.selected
        return {
            instanceFiles: [],   //当前上传后图片对象列表
            sheetActive: false,
            currentSelectedSrc: {},
            readyHideSheet: false,
            selectedList,   // 已被选中的图片，保存的是id
            tempFilePaths: [], //标记选择图片后对应的id，wx-js-sdk是localIds
            tempServerId: [], //标记已经经过内置接口上传获取的serverId/mediaId
            uploadedUrls: [], //标记上传后返回的url集合，每次上传成功后清空
            uploadFileName: "file", //uni.uploadFile的name，props.param.uploadField设置后可覆盖该值
            filesDataByLocalId: [], //通过localId获取的文件信息
            uploading: false,  // 是否正在上传
            readyMoveDom: {}, // 即将移动的元素
            wrapPositionInfo: 0,    // 获取外框尺寸
            listPositionInfo: [],     // 列表的元素位置信息
            touchTimer: null,   // 点击时开始计时
            isLongTouch: false,   // 锁定touch事件
            longPressTime: 30,  //多少毫秒算长按
            moveId: 0,  //准备移动的ID
        }
    },
    watch: {
        src: {
            handler: function (newData, oldData) {
                this.init()
            }, deep: true
        }
    },
    computed: {
        instanceWidth: function () {
            return this.rowCount ? `${(this.wrapPositionInfo.width || 0) / this.rowCount}px` : this.width
        },
        // 根据instanceFiles列表生成的图片URL列表
        picUrls: function () {
            return this.instanceFiles.map(o => o.url)
        },
        /**
         * 外框高度
         * */
        contentHeight() {
            let hei = 0
            let row = Math.floor(this.instanceFiles.length / this.rowCount) + 1
            let width = +this.instanceWidth.replace('px', '')
            if (this.sortable && this.rowCount) {
                hei = row * width
            }
            return hei
        },
        // 添加图片按钮的位置定位
        addBtnPosition() {
            // 实际图片列表占用对行数
            let row = Math.floor(this.instanceFiles.length / this.rowCount)
            let width = +this.instanceWidth.replace('px', '')
            console.log(row)
            let last = this.instanceFiles[this.instanceFiles.length - 1]
            let id = 0
            if (last) {
                id = last.id
            }
            let last_item = this.listPositionInfo[id]
            if (last_item) {
                // 查询最后一个所处的位置
                if (this.instanceFiles.length >= this.rowCount && this.instanceFiles.length % this.rowCount === 0) {
                    console.log('分支1')
                    return `translateX(0) translateY(${row * width}px)`
                } else {
                    console.log('分支2')
                    return `translateX(${last_item.translateX + last_item.width}px) translateY(${row * width}px)`
                }
            } else {
                console.log('分支3')
                return `translateX(0) translateY(0)`
            }
        }
    },
    mounted() {
        this.$nextTick(() => {
            this.init()
        })
    },
    methods: {
        /**
         * 生成不和列表重复的id
         * */
        randomId() {
            let random_id = Math.floor(Math.random() * 100000)
            let find_in_list = this.instanceFiles.findIndex(o => +o.id === random_id)
            if (find_in_list > -1) {
                this.randomId()
            } else {
                return random_id
            }
        },
        init() {
            const that = this
            if (typeof this.src === "string" || this.src.constructor !== Array) {
                console.warn('参数 "src" 应该是一个数组，结构为：[{id:xxx,url:"xxx"}]，其中id为Number且唯一，当前初始src将不显示且不被包含在图片列表')
                return
            }

            that.instanceFiles = this.src.map(i => {

                if (typeof i === 'string' || (i.id && typeof i.id !== 'number')) {
                    let random_id = that.randomId()
                    return {
                        id: random_id,
                        url: i
                    }
                } else if (i.id && i.url) {
                    return i
                }
            })
            this.$nextTick(() => {
                this.initWrapAndItemSize()
            })
        },
        /**
         * 初始化当前列表的定位
         * */
        initListPosition() {
            for (let i in this.instanceFiles) {
                let $i = +i
                let item = this.instanceFiles[i]
                let width = +this.instanceWidth.replace('px', '')
                let translateX = $i % this.rowCount * width
                let translateY = Math.floor($i / this.rowCount) * width
                this.$set(this.listPositionInfo, item.id, {
                    id: +item.id,
                    index: $i,
                    translate: `translateX(${translateX}px) translateY(${translateY}px)`,
                    translateX,
                    translateY,
                    width
                })
            }
        },
        /**
         * 初始化外框宽度
         * */
        initWrapAndItemSize() {
            let query = uni.createSelectorQuery().in(this)
            query.select('#juImageUploadContent').boundingClientRect(rect => {
                console.log(rect)
                this.wrapPositionInfo = rect
                this.initListPosition()
            }).exec()

        },
        /**
         * 返回是否在已选择列表
         * */
        findInSelected(id) {
            return this.selectedList.findIndex(o => +o === +id) > -1
        },
        /**
         * 选择图片
         * */
        async onChoose() {
            const that = this

            if (+that.instanceFiles.length - +that.chooseCount >= 0) {
                return false
            }
            try {
                that.tempFilePaths = JSON.parse(JSON.stringify([]))
                that.uploadedUrls = JSON.parse(JSON.stringify([]))
                that.uploadedServerId = JSON.parse(JSON.stringify([]))
                const IO = new ImageOperation()
                let res = await IO.onChooseImage({
                    count: +that.chooseCount > 9 ? 9 : (+that.chooseCount < 1 ? 1 : +that.chooseCount - +that.instanceFiles.length)
                })

                if (res.status) {
                    // #ifdef H5
                    if (res.type === "uni") {
                        that.tempFilePaths = res.data.paths
                        that.$emit("choose", {
                            type: 'choose',
                            ...res.data,
                            urls: that.picUrls,
                            files: that.instanceFiles,
                            param: that.param
                        })
                        if (that.upload) {
                            that.uploading = true
                            await that.uploadImageForDefault(that.tempFilePaths[0])
                        }
                    } else {
                        that.tempFilePaths = JSON.parse(JSON.stringify(res.data.localIds))

                        await that.chooseAfterWxJSSDK(that.tempFilePaths[0])
                    }
                    // #endif
                    // #ifndef H5
                    that.tempFilePaths = JSON.parse(JSON.stringify(res.data.paths))

                    that.$emit("choose", {
                        type: 'choose',
                        ...res.data,
                        urls: that.picUrls,
                        files: that.instanceFiles,
                        param: that.param
                    })
                    //如果开启上传
                    if (that.upload) {
                        that.uploading = true
                        await that.uploadImageForDefault(that.tempFilePaths[0])
                    }

                    // #endif
                }
            } catch (e) {
                console.error(e)
                throw new Error(e)
            }
        },
        /**
         * H5端，使用wx js-sdk时，选择图片后的处理
         * */
        async chooseAfterWxJSSDK(localId) {
            const that = this
            if (!localId) {
                return
            }
            try {
                const IO = new ImageOperation()

                if (IO.isWechatBrowser() && that.$wx) {
                    let filesDataByLocalId = JSON.parse(JSON.stringify(that.filesDataByLocalId))
                    that.$wx.getLocalImgData({
                        localId,
                        success(res) {
                            filesDataByLocalId.push(res.localData)
                            that.filesDataByLocalId = JSON.parse(JSON.stringify(filesDataByLocalId))
                        }
                    })
                    // 使用localId上传，获得serverId
                    let res = await IO.uploadForWXSDK({localId})
                    if (res.status === 1) {


                        that.uploadedServerId.push(res.data)
                        if (that.uploadedServerId.length === that.tempFilePaths.length) {
                            that.$emit("choose", {
                                type: 'choose',
                                serverIds: that.uploadedServerId,
                                files: that.instanceFiles,
                                param: that.param,
                                urls: that.picUrls,
                                localFile: that.filesDataByLocalId
                            })
                            //如果要自动上传
                            if (that.upload) {
                                that.uploading = true

                                await that.uploadImageForWXJSSDK(that.uploadedServerId[0])
                            }

                        } else {
                            //递归回传最新的tempFilePath
                            await that.chooseAfterWxJSSDK(
                                that.tempFilePaths[that.uploadedServerId.length]
                            )
                        }
                    }
                }
            } catch (e) {
                console.error(e)
            }
        },
        /**
         * H5，使用js-sdk时，递归上传图片到服务器
         * */
        async uploadImageForWXJSSDK(serverId) {
            const that = this

            const IO = new ImageOperation()
            if (!serverId || !IO.isWechatBrowser() || !this.$wx) {
                return false
            }
            try {
                //@FIXME 此处已定义默认的上传serverId的接口，需要时修改
                let res = await request(that.uploadWxSdkUrl).post({mediaId: serverId})

                //@FIXME 此处视自己的API差异而定
                if (res.code === 0) {
                    that.uploadAfter(res.data)

                }
            } catch (e) {
                that.uploading = false
                console.error(e)
            }
        },
        /**
         * 非wx-js-sdk上传文件
         * */
        async uploadImageForDefault(localFile) {
            const that = this
            if (!localFile) {
                return
            }
            try {
                const IO = new ImageOperation()
                let formData = that.param && that.param.formData ? that.param.formData : {}
                //@FIXME 此处为自定义的登录态标识
                formData.access_token = uni.getStorageSync("access_token")
                let res = await IO.uploadForUni({
                    url: that.uploadUrl,
                    filePath: localFile,
                    name: that.param && that.param.uploadField ? that.param.uploadField : that.uploadFileName,
                    formData
                })
                //@FIXME res.code状态视自己的API差异而定
                that.uploading = false
                if (res.code === 0) {
                    that.uploadAfter(res.data)
                } else if (res.code === 1) {
                    uni.showModal({
                        title: '提示',
                        content: res.msg,
                    })
                    let find_this_template_url = that.tempFilePaths.findIndex(o => o === localFile)
                    if (find_this_template_url > -1 && find_this_template_url !== that.tempFilePaths.length - 1) {
                        that.tempFilePaths.splice(find_this_template_url, 1)
                        await that.uploadImageForDefault(that.tempFilePaths[find_this_template_url])
                    } else {
                        that.$emit("upload", {
                            type: 'upload',
                            param: that.param,
                            current_upload: that.uploadedUrls,
                            urls: that.picUrls,
                            files: that.instanceFiles
                        })
                    }
                } else if (res.code === -1) {
                    uni.showModal({
                        title: '未登录',
                        content: res.msg,
                        success(cn) {
                            if (cn.confirm) {
                                uni.navigateTo({
                                    url: '/pages-sub/login/login'
                                })
                            }
                        }
                    })
                }
            } catch (e) {
                that.uploading = false
                console.error(e)
            }
        },
        /**
         * 上传后处理，给图片添加id
         * */
        uploadAfter(data) {
            const that = this
            this.debug.log(data)
            let random_id = Math.floor(Math.random() * 100000)
            //如果存在，重新生成
            if (that.instanceFiles.findIndex(o => o.id === random_id) > 0) {
                that.uploadAfter(data)
                return
            }
            let current_item = {
                id: random_id,
                ...data
            }
            that.instanceFiles.push(current_item)
            if (data && data.url) {
                that.uploadedUrls.push(data.url)
            }
            const IO = new ImageOperation()

            if (IO.isWechatBrowser()) {
                if (that.uploadedUrls.length !== that.uploadedServerId.length) {
                    that.uploadImageForWXJSSDK(that.uploadedServerId[that.uploadedUrls.length])
                } else {
                    that.$emit("upload", {
                        type: 'upload',
                        param: that.param,
                        current_upload: that.uploadedUrls,
                        urls: that.picUrls,
                        files: that.instanceFiles
                    })
                    that.uploading = false
                }
            } else {
                if (that.uploadedUrls.length !== that.tempFilePaths.length) {
                    that.uploadImageForDefault(that.tempFilePaths[that.uploadedUrls.length])
                } else {
                    that.$emit("upload", {
                        type: 'upload',
                        param: that.param,
                        current_upload: that.uploadedUrls,
                        urls: that.picUrls,
                        files: that.instanceFiles
                    })
                    that.uploading = false
                }
            }
        },
        /**
         * 预览
         */
        onPreview() {
            if (!this.moveId) {
                return false
            }
            let index = this.instanceFiles.findIndex(o => +o.id === this.moveId)
            uni.previewImage({
                urls: this.picUrls,
                current: this.instanceFiles[index].id,
                success: (res) => {
                    this.$emit("preview", {
                        type: 'preview',
                        current: this.instanceFiles[index],
                        index,
                        urls: this.picUrls,
                        files: this.instanceFiles,
                        param: this.param
                    })
                }
            })
        },
        /**
         * 删除，目前只支持删除后上传
         */
        onRemove(item) {
            const that = this
            console.log(item)
            if (!item) {
                return false
            }
            let find_current = that.instanceFiles.findIndex(o => o.id === item.id)
            if (this.removeConfirm) {
                uni.showModal({
                    title: `您正在删除列表第${find_current + 1}张`,
                    content: "是否确认删除？",
                    success: r => {
                        if (r.confirm) {
                            that.instanceFiles.splice(find_current, 1)
                            // 否在已选择列表 begin
                            let find_in_selected = that.selectedList.findIndex(o => o === item.id)
                            if (find_in_selected > -1) {
                                that.selectedList.splice(find_in_selected, 1)
                            }
                            // 查找是否在已选择列表 end
                            that.$emit("remove", {
                                type: 'remove',
                                current: item,
                                index: find_current,
                                urls: that.picUrls,
                                files: that.instanceFiles,
                                param: this.param,
                                selected: that.selectedList
                            })
                        }
                    }
                })
            } else {
                that.instanceFiles.splice(find_current, 1)
                delete this.listPositionInfo[item.id]
                // 否在已选择列表 begin
                let find_in_selected = that.selectedList.findIndex(o => o === item.id)
                if (find_in_selected > -1) {
                    that.selectedList.splice(find_in_selected, 1)
                }
                // 查找是否在已选择列表 end
                that.$emit("remove", {
                    type: 'remove',
                    current: item,
                    index: find_current,
                    urls: that.picUrls,
                    files: that.instanceFiles,
                    param: this.param,
                    selected: that.selectedList
                })
            }
        },
        /**
         * 选择图片，暂时废弃
         */
        onSelect(item, index) {
            if (!item) {
                return
            }
            let find_in_selected = this.selectedList.findIndex(o => +o === +item.id)
            if (find_in_selected > -1) {
                this.selectedList.splice(find_in_selected, 1)
            } else {
                if (+this.selectCount === 1 && find_in_selected < 0) {
                    this.selectedList = new Array([item.id])
                }
            }

            this.$emit("select", {
                type: 'select',
                current: item,
                index: index,
                param: this.param,
                urls: this.picUrls,
                files: this.instanceFiles,
                selected: this.selectedList
            })
        },
        /**
         * 点击时，获取id
         * */
        onTouchStart(e, item, index) {
            console.log(e, item, index)
            let {pageX, pageY} = e.touches[0]

            this.isLongTouch = false
            this.touchPlusTime({pageX, pageY}, item.id, index)
        },

        touchStartFromWxs(position) {
            console.log('wxs的touchstart', position)
            this.touchPlusTime()
        },
        /**
         * 自加
         * */
        touchPlusTime() {
            console.log('从wxs调用')
            if (this.isLongTouch) {
                clearTimeout(this.touchTimer)
                return false
            }
            if (this.longPressTime > 0) {
                this.isLongTouch = false
                this.longPressTime--
                this.touchTimer = setTimeout(() => this.touchPlusTime(), 1)
            } else {
                this.isLongTouch = true
            }
        },
        /**
         * 在touchstart的时候获得元素信息和位置
         * */
        initInTouchStart(position, id, index) {
            console.log(position, id, index)
            let {pageX, pageY} = position
            this.$emit('long-press', {data: this.instanceFiles.find(o => +o.id === +id), index, longpress: true})

            let find_item = deepClone(this.listPositionInfo[id])
            console.log(find_item)

            find_item = Object.assign(find_item, {
                index,
                longpress: true,
                o_page_x: pageX,
                o_page_y: pageY,
                page_x: pageX,
                page_y: pageY,
                o_translate_x: find_item.translateX,
                o_translate_y: find_item.translateY
            })
            this.readyMoveDom = deepClone(find_item)
            this.$set(this.listPositionInfo, id, find_item)
        },
        /**
         * touch松手
         * */
        onTouchEnd() {
            clearTimeout(this.touchTimer)
            this.touchTimer = null
            if (!this.isLongTouch) {
                this.onPreview()
            } else {
                console.log('松手了')
            }
            this.longPressTime = 30
            this.isLongTouch = false
        },
        /**
         * 图片拖动
         * @param e
         */
        onTouchMoveMovable(e) {
            const that = this
            if (that.touchStartTime < that.longPressTime) {
                return false
            }
            let {pageX, pageY} = e.touches[0]
            let {o_translate_x, o_translate_y, o_page_x, o_page_y} = this.readyMoveDom

            let moveX = o_translate_x + pageX - o_page_x
            let moveY = o_translate_y + pageY - o_page_y
            console.log(moveX, moveY)
            let row = Math.floor(this.instanceFiles.length / this.rowCount) + 1
            if (moveX <= 0) {
                moveX = 0
            } else if (moveX >= this.wrapPositionInfo.width - this.instanceWidth) {
                moveX = this.wrapPositionInfo.width - this.instanceWidth
            }
            if (moveY <= 0) {
                moveY = 0
            } else if (moveY >= (row - 1) * this.instanceWidth) {
                moveY = (row - 1) * this.instanceWidth
            }
            this.$nextTick(() => {
                this.readyMoveDom.page_x = pageX
                this.readyMoveDom.page_y = pageY
                this.readyMoveDom.translateX = moveX
                this.readyMoveDom.translateY = moveY
                this.readyMoveDom.translate = `translateX(${moveX}px) translateY(${moveY}px)`
            })
        },
        /**
         * 查找translate
         * @param id
         * @return {*}
         */
        findTranslate(id) {
            if (!id || !this.listPositionInfo[id]) {
                return 'none'
            }
            if (+id === +this.readyMoveDom.id) {
                return this.readyMoveDom.translate
            } else {
                return this.listPositionInfo[id].translate
            }
        },
    }
}
</script>
<style lang="scss">
@import "./iconfont/iconfont";

$grey: #eeeeee;
$grey100: #f2f2f2;
@function units($val) {
    @return $val * 2rpx;
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }

    to {
        opacity: 0.5;
    }
}

@keyframes fadeOut {
    from {
        opacity: 0.5;
    }

    to {
        opacity: 0;
    }
}

@keyframes translateY {
    from {
        transform: translateY(50vh);
    }
    to {
        transform: translateY(0);
    }
}

@keyframes translateYReverse {
    from {
        transform: translateY(0);
    }
    to {
        transform: translateY(50vh);
    }
}

@keyframes translateCycle {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

.spinner {
    &-cycle {
        animation: {
            name: translateCycle;
            duration: 1s;
            timing-function: cubic-bezier(0.5, 0.25, 0.25, 0.5);
            iteration-count: infinite;
            fill-mode: forwards;
        }
    }

    &-reverse {
        animation: {
            direction: alternate;
        }
    }
}

view,
button,
image,
movable-view,
movable-area,
img {
    box-sizing: border-box;
    line-height: 1;
}

.img-upload {
    // overflow: hidden;
    position: relative;

    &-mask {
        background-color: rgba($color: #000, $alpha: 0.5);
        position: fixed;
        width: 100%;
        height: 100%;
        z-index: 1;
        top: 0;
        left: 0;
        display: none;
    }

    &-content {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: stretch;
        flex-wrap: wrap;
    }

    &-container {
        position: relative;
        transition: all .2s;

        &.img-preview-item {
            transition: all .2s;
        }

        &.img-move-placeholder {
            .img-upload-body {
                border: 2px dashed #ccc;
            }
        }

        &.in-moving {
            z-index: 3;

            &.btn-type-default-remove {
                display: none;
            }
        }

        &.is-sortable {
            position: absolute;
            left: 0;
            top: 0;
        }
    }

    &-body {
        width: 100%;
        height: 100%;

        transition: all .2s;

        &.in-moving {
            transform: scale(1.2);
        }

        &.square {
            height: 0;
            padding-bottom: 100%;
        }

        position: relative;

        &:active {
            background-color: lighten($grey100, 3%) !important;
        }

        .img-upload-image {
            width: 100%;
            height: 100%;
        }

        &-content {
            position: absolute;
            left: 0;
            top: 0;
            z-index: 1;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            border: 1px solid darken($grey, 10%);
            overflow: hidden;

            &.no-border {
                border: 0 !important;
            }

            &.selected {
                border: {
                    color: $uni-color-primary;
                    style: solid;
                }
            }
        }
    }

    .icon-box {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    &-check {
        position: absolute;
        width: 100%;
        height: 100%;
        z-index: 1;
        background-color: rgba(#000, 0.5);
        color: #fff;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: units(40);
    }

    &-img {
        width: 100%;
        height: 100%;
    }

    &-btn {
        border-radius: 0;
        border: 0;

        &::after {
            display: none;
            border-radius: 0;
            border-color: darken($grey, 10%);
        }

        .btn-icon {
            margin-bottom: units(5);
            font-size: units(40);
        }

        .btn-text {
            margin-top: units(5);
            line-height: 1.5;
        }
    }
}

.img-upload-sheet {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2;

    &-control {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        z-index: 1;
        padding: units(15);
        background-color: #ffffff;
        animation: translateY 0.5s ease 0ms 1 normal forwards;
        transform: translateY(50vh);

        > .item {
            + .item {
                margin-top: units(10);
            }
        }

        .control-btn-item {
            background-color: $grey100;
            font-size: units(14);
            display: flex;
            align-items: center;
            padding: units(15) units(10);
            color: #fff;

            &:active {
                opacity: 0.9;
            }

            &::after {
                display: none;
            }

            &-icon,
            &-text {
                flex: 1;
            }

            &-icon {
                text-align: right;
            }

            &-text {
                text-align: left;
            }

            &-remove {
                background-color: #dd524d;
            }

            &-preview {
                background-color: #00a95e;
            }

            &-select {
                background-color: dodgerblue;
            }

            .vis-icon {
                margin-right: units(10);
            }
        }
    }

    &-mask {
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        opacity: 0;
        background-color: #000000;
        animation: fadeIn 0.5s ease-in 0ms 1 normal forwards;
    }

    &.ready-hide {
        .img-upload-sheet-mask {
            animation: fadeOut 0.5s ease-in 0ms 1 normal forwards;
        }

        .img-upload-sheet-control {
            animation: translateYReverse 0.5s ease 0ms 1 normal forwards;
        }
    }
}

.btn-type-default {
    &-select {
        position: absolute;
        width: units(20);
        height: units(20);
    }

    &-remove {
        position: absolute;
        width: units(15);
        height: units(15);
        right: units(5);
        top: units(5);
        display: flex;
        z-index: 2;
        font-size: units(8);
        align-items: center;
        justify-content: center;
        border-radius: 100%;
        color: #000;
        font-weight: bold;
        opacity: 0.5;

        &-img {
            width: 100%;
            height: 100%;
        }
    }

    &-select {
        bottom: units(5);
        right: units(5);
        font-size: units(14);
        display: flex;
        align-items: center;
        justify-content: center;
        color: #fff;
        z-index: 8;
        box-shadow: 0 0 4px inset rgba($color: #000000, $alpha: 0.2);
        border-radius: units(3);
        background-color: rgba(#000, 0.6);

        &.selected {
            background-color: $uni-color-primary;
            border-color: #fff;
        }
    }
}
</style>
